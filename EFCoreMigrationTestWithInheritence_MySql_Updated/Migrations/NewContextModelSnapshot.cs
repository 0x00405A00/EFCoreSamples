// <auto-generated />
using System;
using EFCoreMigrationTestWithInheritence_MySql_Updated;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreMigrationTestWithInheritence_MySql_Updated.Migrations
{
    [DbContext(typeof(NewContext))]
    partial class NewContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Shared.Entities.Auths.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 367, DateTimeKind.Local).AddTicks(3688))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("LocalIp")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("local_ip");

                    b.Property<uint>("LocalIpPort")
                        .HasMaxLength(5)
                        .HasColumnType("int unsigned")
                        .HasColumnName("local_port");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime")
                        .HasColumnName("logout_time");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiresIn")
                        .HasColumnType("datetime")
                        .HasColumnName("refresh_token_expires_in");

                    b.Property<string>("RemoteIp")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("remote_ip");

                    b.Property<uint>("RemoteIpPort")
                        .HasMaxLength(5)
                        .HasColumnType("int unsigned")
                        .HasColumnName("remote_port");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("token");

                    b.Property<DateTime>("TokenExpiresIn")
                        .HasColumnType("datetime")
                        .HasColumnName("token_expires_in");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("browser_user_agent");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.ToTable("auth", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Chats.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 367, DateTimeKind.Local).AddTicks(6654))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("PictureFileExtension")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("picture_path_file_extension");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("picture_path");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Chats.ChatRelationToUser", b =>
                {
                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ChatForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("chat_id");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 373, DateTimeKind.Local).AddTicks(7043))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<bool?>("IsChatAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin")
                        .HasComment("boolean value to describe if chatmember is chat-admin");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.HasKey("UserForeignKey", "ChatForeignKey");

                    b.HasIndex("ChatForeignKey");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.ToTable("chat_relation_to_user", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Chats.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("BinaryContentBase64")
                        .HasColumnType("TEXT")
                        .HasColumnName("binary_content_base64");

                    b.Property<string>("BinaryContentBase64MimeType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("binary_content_base64_mime_type");

                    b.Property<string>("BinaryContentPath")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("binary_content_path");

                    b.Property<string>("BinaryContentPathFileExtension")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("binary_content_path_file_extension");

                    b.Property<Guid>("ChatForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("chat_id");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 382, DateTimeKind.Local).AddTicks(5322))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ChatForeignKey");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.HasIndex("UserForeignKey");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Chats.MessageOutbox", b =>
                {
                    b.Property<Guid>("MessageForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("message_id");

                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 392, DateTimeKind.Local).AddTicks(9384))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.HasKey("MessageForeignKey", "UserForeignKey");

                    b.HasIndex("UserForeignKey");

                    b.ToTable("message_outbox", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5844))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3f357ff-1c85-4e3c-b6b2-21ef4afba71f"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 366, DateTimeKind.Local).AddTicks(4034),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("c92db414-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 366, DateTimeKind.Local).AddTicks(4052),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Shared.Entities.Users.ChatInviteRequest", b =>
                {
                    b.Property<Guid>("ChatForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("TargetUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("target_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 396, DateTimeKind.Local).AddTicks(1107))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("RequesterUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("requester_id");

                    b.Property<string>("TargetUserRequestMessage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_message");

                    b.HasKey("ChatForeignKey", "TargetUserForeignKey");

                    b.HasIndex(new[] { "ChatForeignKey" }, "IDX_FK_CHATINVITEREQUEST_CHAT_CHAT");

                    b.HasIndex(new[] { "RequesterUserForeignKey" }, "IDX_FK_CHATINVITEREQUEST_REQUESTERUSER_EUSER");

                    b.HasIndex(new[] { "TargetUserForeignKey" }, "IDX_FK_CHATINVITEREQUEST_TARGETUSER_EUSER");

                    b.ToTable("chat_invite_request", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Users.EUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 350, DateTimeKind.Local).AddTicks(7417))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("password");

                    b.Property<Guid>("UserTypeForeignKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValue(new Guid("c92db314-765b-46dd-bf40-ef7d5a5abd7b"))
                        .HasColumnName("user_type_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.HasIndex("UserTypeForeignKey");

                    b.ToTable("e_user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5030),
                            Email = "root@localhost",
                            Name = "Root",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("9701e0cd-2f02-4243-80eb-3b3a3efe112a"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5106),
                            Email = "test0@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5107),
                            Name = "Test0",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("51af126a-11db-477c-8a14-1cadc993b14f"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5113),
                            Email = "test1@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5114),
                            Name = "Test1",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("5615b431-5375-473c-8d42-0dd8647ddc7e"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5117),
                            Email = "test2@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5119),
                            Name = "Test2",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("324d73e9-016f-4b7d-9db8-8c9173dd721e"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5122),
                            Email = "test3@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5123),
                            Name = "Test3",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("e4f2cb6d-29db-45b2-8df2-c46147e1ab27"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5126),
                            Email = "test4@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5127),
                            Name = "Test4",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("fd8bbd38-9b82-4c9c-851f-8b43cf488b10"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5157),
                            Email = "test5@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5158),
                            Name = "Test5",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("20f3f65d-3df8-435c-b161-1ac3119d68f7"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5174),
                            Email = "test6@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5175),
                            Name = "Test6",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("316021a7-e10f-4dc1-990a-ae8a06215463"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5179),
                            Email = "test7@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5180),
                            Name = "Test7",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("7d9ecc20-41be-4cf4-9954-98326f027320"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5183),
                            Email = "test8@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5184),
                            Name = "Test8",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("bbd927a6-e400-4643-b604-d422322aee20"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5187),
                            Email = "test9@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 28, 3, 21, 47, 360, DateTimeKind.Local).AddTicks(5188),
                            Name = "Test9",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        });
                });

            modelBuilder.Entity("Shared.Entities.Users.FriendshipRequest", b =>
                {
                    b.Property<Guid>("RequestUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("requester_id");

                    b.Property<Guid>("TargetUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("target_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 347, DateTimeKind.Local).AddTicks(5303))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("TargetUserRequestMessage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_message");

                    b.HasKey("RequestUserForeignKey", "TargetUserForeignKey");

                    b.HasIndex(new[] { "RequestUserForeignKey" }, "IDX_FK_FRIENDSHIPREQUEST_REQUESTERUSER_EUSER");

                    b.HasIndex(new[] { "TargetUserForeignKey" }, "IDX_FK_FRIENDSHIPREQUEST_TARGETUSER_EUSER");

                    b.ToTable("friendship_request", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Users.UserHasRelationToFriend", b =>
                {
                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserFriendForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("friend_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 344, DateTimeKind.Local).AddTicks(1813))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.HasKey("UserForeignKey", "UserFriendForeignKey");

                    b.HasIndex(new[] { "UserForeignKey" }, "IDX_FK_USERHASRELATIONTOFRIEND_USERFOREIGNKEY_EUSER");

                    b.HasIndex(new[] { "UserFriendForeignKey" }, "IDX_FK_USERHASRELATIONTOFRIEND_USERFRIENDFOREIGNKEY_EUSER");

                    b.ToTable("user_has_relation_to_friend", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Users.UserHasRelationToRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 366, DateTimeKind.Local).AddTicks(8439))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("RoleForeignKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValue(new Guid("c92db414-765b-46dd-bf40-ef7d5a5abd7b"))
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleForeignKey" }, "IDX_FK_USERHASRELATIONTOROLE_ROLEFOREIGNKEY_ROLE");

                    b.HasIndex(new[] { "UserForeignKey" }, "IDX_FK_USERHASRELATIONTOROLE_USERFOREIGNKEY_EUSER");

                    b.ToTable("user_has_relation_to_role", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Users.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 28, 3, 21, 47, 337, DateTimeKind.Local).AddTicks(3812))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.ToTable("user_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c92db314-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 343, DateTimeKind.Local).AddTicks(8799),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f"),
                            CreatedTime = new DateTime(2023, 12, 28, 3, 21, 47, 343, DateTimeKind.Local).AddTicks(8827),
                            Name = "Root"
                        });
                });

            modelBuilder.Entity("Shared.Entities.Auths.Auth", b =>
                {
                    b.HasOne("Shared.Entities.Users.EUser", "User")
                        .WithMany("Auths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_AUTH_USERID_TO_EUSER");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Chats.Chat", b =>
                {
                    b.HasOne("Shared.Entities.Users.EUser", "CreatedByUser")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CHAT_CREATEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "DeletedByUser")
                        .WithMany("DeletedChats")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CHAT_DELETEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "LastModifiedByUser")
                        .WithMany("ModifiedChats")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CHAT_LASTMODIFIEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("Shared.Entities.Chats.ChatRelationToUser", b =>
                {
                    b.HasOne("Shared.Entities.Chats.Chat", "Chat")
                        .WithMany("ChatRelationToUsers")
                        .HasForeignKey("ChatForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHATRELATIONTOUSER_CHATFOREIGNKEY_TO_CHAT");

                    b.HasOne("Shared.Entities.Users.EUser", "CreatedByUser")
                        .WithMany("CreatedChatRelationToUsers")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CHATRELATIONTOUSER_CREATEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "DeletedByUser")
                        .WithMany("DeletedChatRelationToUsers")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CHATRELATIONTOUSER_DELETEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "LastModifiedByUser")
                        .WithMany("ModifiedChatRelationToUsers")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CHATRELATIONTOUSER_LASTMODIFIEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "User")
                        .WithMany("ChatRelationToUsers")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHATRELATIONTOUSER_USERFOREIGNKEY_TO_EUSER");

                    b.Navigation("Chat");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Chats.Message", b =>
                {
                    b.HasOne("Shared.Entities.Chats.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MESSAGE_CHATFOREIGNKEY_TO_CHAT");

                    b.HasOne("Shared.Entities.Users.EUser", "CreatedByUser")
                        .WithMany("CreatedMessages")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_MESSAGE_CREATEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "DeletedByUser")
                        .WithMany("DeletedMessages")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_MESSAGE_DELETEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "LastModifiedByUser")
                        .WithMany("ModifiedMessages")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_MESSAGE_LASTMODIFIEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MESSAGE_USERFOREIGNKEY_TO_EUSER");

                    b.Navigation("Chat");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Chats.MessageOutbox", b =>
                {
                    b.HasOne("Shared.Entities.Chats.Message", "Message")
                        .WithMany("MessagesInOutbox")
                        .HasForeignKey("MessageForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MESSAGEOUTBOX_MESSAGEFOREIGNKEY_TO_CHAT");

                    b.HasOne("Shared.Entities.Users.EUser", "User")
                        .WithMany("MessagesInOutbox")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MESSAGEOUTBOX_USERFOREIGNKEY_TO_EUSER");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Roles.Role", b =>
                {
                    b.HasOne("Shared.Entities.Users.EUser", "CreatedByUser")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ROLE_CREATEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "DeletedByUser")
                        .WithMany("DeletedRoles")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ROLE_DELETEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "LastModifiedByUser")
                        .WithMany("ModifiedRoles")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ROLE_LASTMODIFIEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("Shared.Entities.Users.ChatInviteRequest", b =>
                {
                    b.HasOne("Shared.Entities.Chats.Chat", "Chat")
                        .WithMany("ChatInvitesToUsers")
                        .HasForeignKey("ChatForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHATINVITEREQUEST_CHATFOREIGNKEY_TO_CHAT");

                    b.HasOne("Shared.Entities.Users.EUser", "RequesterUser")
                        .WithMany("ChatInvitesWhereIamRequester")
                        .HasForeignKey("RequesterUserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHATINVITEREQUEST_REQUESTERUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "TargetUser")
                        .WithMany("ChatInvitesWhereIamTarget")
                        .HasForeignKey("TargetUserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHATINVITEREQUEST_TARGETUSERFOREIGNKEY_TO_EUSER");

                    b.Navigation("Chat");

                    b.Navigation("RequesterUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Shared.Entities.Users.EUser", b =>
                {
                    b.HasOne("Shared.Entities.Users.EUser", "CreatedByUser")
                        .WithMany("CreatedEUsers")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_EUSER_CREATEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "DeletedByUser")
                        .WithMany("DeletedEUsers")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_EUSER_DELETEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "LastModifiedByUser")
                        .WithMany("ModifiedEUsers")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_EUSER_LASTMODIFIEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EUSER_USERTYPEFOREIGNKEY_TO_USERTYPE");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Shared.Entities.Users.FriendshipRequest", b =>
                {
                    b.HasOne("Shared.Entities.Users.EUser", "RequesterUser")
                        .WithMany("FriendshipRequestsWhereIamRequester")
                        .HasForeignKey("RequestUserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FRIENDSHIPREQUEST_REQUESTUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "TargetUser")
                        .WithMany("FriendshipRequestsWhereIamTarget")
                        .HasForeignKey("TargetUserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FRIENDSHIPREQUEST_TARGETUSERFOREIGNKEY_TO_EUSER");

                    b.Navigation("RequesterUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Shared.Entities.Users.UserHasRelationToFriend", b =>
                {
                    b.HasOne("Shared.Entities.Users.EUser", "User")
                        .WithMany("UserHasRelationToFriendsLeft")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USERHASRELATIONTOFRIEND_USERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "UserFriend")
                        .WithMany("UserHasRelationToFriendsRight")
                        .HasForeignKey("UserFriendForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USERHASRELATIONTOFRIEND_USERFRIENDFOREIGNKEY_TO_EUSER");

                    b.Navigation("User");

                    b.Navigation("UserFriend");
                });

            modelBuilder.Entity("Shared.Entities.Users.UserHasRelationToRole", b =>
                {
                    b.HasOne("Shared.Entities.Roles.Role", "Role")
                        .WithMany("UserHasRelationToRoles")
                        .HasForeignKey("RoleForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USERHASRELATIONTOROLE_ROLEFOREIGNKEY_TO_ROLE");

                    b.HasOne("Shared.Entities.Users.EUser", "User")
                        .WithMany("UserHasRelationToRoles")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USERHASRELATIONTOROLE_USERFOREIGNKEY_TO_EUSER");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Users.UserType", b =>
                {
                    b.HasOne("Shared.Entities.Users.EUser", "CreatedByUser")
                        .WithMany("CreatedUserTypes")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_USERTYPE_CREATEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "DeletedByUser")
                        .WithMany("DeletedUserTypes")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_USERTYPE_DELETEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.HasOne("Shared.Entities.Users.EUser", "LastModifiedByUser")
                        .WithMany("ModifiedUserTypes")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_USERTYPE_LASTMODIFIEDBYUSERFOREIGNKEY_TO_EUSER");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("Shared.Entities.Chats.Chat", b =>
                {
                    b.Navigation("ChatInvitesToUsers");

                    b.Navigation("ChatRelationToUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Shared.Entities.Chats.Message", b =>
                {
                    b.Navigation("MessagesInOutbox");
                });

            modelBuilder.Entity("Shared.Entities.Roles.Role", b =>
                {
                    b.Navigation("UserHasRelationToRoles");
                });

            modelBuilder.Entity("Shared.Entities.Users.EUser", b =>
                {
                    b.Navigation("Auths");

                    b.Navigation("ChatInvitesWhereIamRequester");

                    b.Navigation("ChatInvitesWhereIamTarget");

                    b.Navigation("ChatRelationToUsers");

                    b.Navigation("CreatedChatRelationToUsers");

                    b.Navigation("CreatedChats");

                    b.Navigation("CreatedEUsers");

                    b.Navigation("CreatedMessages");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedUserTypes");

                    b.Navigation("DeletedChatRelationToUsers");

                    b.Navigation("DeletedChats");

                    b.Navigation("DeletedEUsers");

                    b.Navigation("DeletedMessages");

                    b.Navigation("DeletedRoles");

                    b.Navigation("DeletedUserTypes");

                    b.Navigation("FriendshipRequestsWhereIamRequester");

                    b.Navigation("FriendshipRequestsWhereIamTarget");

                    b.Navigation("Messages");

                    b.Navigation("MessagesInOutbox");

                    b.Navigation("ModifiedChatRelationToUsers");

                    b.Navigation("ModifiedChats");

                    b.Navigation("ModifiedEUsers");

                    b.Navigation("ModifiedMessages");

                    b.Navigation("ModifiedRoles");

                    b.Navigation("ModifiedUserTypes");

                    b.Navigation("UserHasRelationToFriendsLeft");

                    b.Navigation("UserHasRelationToFriendsRight");

                    b.Navigation("UserHasRelationToRoles");
                });

            modelBuilder.Entity("Shared.Entities.Users.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
