// <auto-generated />
using System;
using EFCoreMigrationTestWithInheritence_MySql_Updated;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreMigrationTestWithInheritence_MySql_Updated.Migrations
{
    [DbContext(typeof(NewContext))]
    partial class NewContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Shared.Entities.Auths.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 271, DateTimeKind.Local).AddTicks(6543))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("LocalIp")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("local_ip");

                    b.Property<uint>("LocalIpPort")
                        .HasMaxLength(5)
                        .HasColumnType("int unsigned")
                        .HasColumnName("local_port");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime")
                        .HasColumnName("logout_time");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiresIn")
                        .HasColumnType("datetime")
                        .HasColumnName("refresh_token_expires_in");

                    b.Property<string>("RemoteIp")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("remote_ip");

                    b.Property<uint>("RemoteIpPort")
                        .HasMaxLength(5)
                        .HasColumnType("int unsigned")
                        .HasColumnName("remote_port");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("token");

                    b.Property<DateTime>("TokenExpiresIn")
                        .HasColumnType("datetime")
                        .HasColumnName("token_expires_in");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("browser_user_agent");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_uuid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.ToTable("auth", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Chats.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 272, DateTimeKind.Local).AddTicks(842))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("PictureFileExtension")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("picture_path_file_extension");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("picture_path");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Chats.ChatRelationToUser", b =>
                {
                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ChatForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("chat_id");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 280, DateTimeKind.Local).AddTicks(7365))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<bool?>("IsChatAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin")
                        .HasComment("boolean value to describe if chatmember is chat-admin");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.HasKey("UserForeignKey", "ChatForeignKey");

                    b.HasIndex("ChatForeignKey");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.ToTable("chat_relation_to_user", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Chats.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("BinaryContentBase64")
                        .HasColumnType("TEXT")
                        .HasColumnName("binary_content_base64");

                    b.Property<string>("BinaryContentBase64MimeType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("binary_content_base64_mime_type");

                    b.Property<string>("BinaryContentPath")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("binary_content_path");

                    b.Property<string>("BinaryContentPathFileExtension")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("binary_content_path_file_extension");

                    b.Property<Guid>("ChatForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("chat_id");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 293, DateTimeKind.Local).AddTicks(9544))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ChatForeignKey");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.HasIndex("UserForeignKey");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Chats.MessageOutbox", b =>
                {
                    b.Property<Guid>("MessageForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("message_id");

                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 308, DateTimeKind.Local).AddTicks(6006))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.HasKey("MessageForeignKey", "UserForeignKey");

                    b.HasIndex("UserForeignKey");

                    b.ToTable("message_outbox", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Mail.EmailSendingType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 318, DateTimeKind.Local).AddTicks(6196))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("email_sending_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4f357ff-1c85-4e3c-b6b2-21ef4afba71f"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 318, DateTimeKind.Local).AddTicks(7122),
                            Name = "to"
                        },
                        new
                        {
                            Id = new Guid("c62db414-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 318, DateTimeKind.Local).AddTicks(7135),
                            Name = "cc"
                        },
                        new
                        {
                            Id = new Guid("c52db414-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 318, DateTimeKind.Local).AddTicks(7138),
                            Name = "bcc"
                        });
                });

            modelBuilder.Entity("Shared.Entities.Mail.MailOutbox", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 320, DateTimeKind.Local).AddTicks(1413))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("from");

                    b.Property<bool?>("IsBodyHtml")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_body_html")
                        .HasComment("boolean value to describe if email contain html content");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subject");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("mail_outbox", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Mail.MailOutboxAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("attachment_path");

                    b.Property<string>("AttachmentSha1")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("attachment_sha1");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 322, DateTimeKind.Local).AddTicks(8813))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filename");

                    b.Property<bool?>("IsEmbededInHtml")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_embeded_in_html")
                        .HasComment("boolean value to describe if attachment is part of html mail");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("MailOutboxForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("mail_outbox_id");

                    b.Property<string>("MimeCid")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("mime_cid");

                    b.Property<string>("MimeMediaSubType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("mime_media_subtype");

                    b.Property<string>("MimeMediaType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("mime_media_type");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("MailOutboxForeignKey");

                    b.ToTable("mail_outbox_attachment", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Mail.MailOutboxRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 320, DateTimeKind.Local).AddTicks(9020))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<Guid>("EmailSendingTypeForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("email_type_id");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("MailOutboxForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("mail_outbox_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("EmailSendingTypeForeignKey");

                    b.HasIndex("MailOutboxForeignKey");

                    b.ToTable("mail_outbox_recipient", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(3776))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3f357ff-1c85-4e3c-b6b2-21ef4afba71f"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 261, DateTimeKind.Local).AddTicks(3060),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("c92db414-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 261, DateTimeKind.Local).AddTicks(3103),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Shared.Entities.Users.ChatInviteRequest", b =>
                {
                    b.Property<Guid>("ChatForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("TargetUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("target_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 311, DateTimeKind.Local).AddTicks(9628))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("RequesterUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("requester_id");

                    b.Property<string>("TargetUserRequestMessage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_message");

                    b.HasKey("ChatForeignKey", "TargetUserForeignKey");

                    b.HasIndex(new[] { "ChatForeignKey" }, "IDX_FK__CHATINVITEREQUEST_CHAT_TO_CHAT");

                    b.HasIndex(new[] { "RequesterUserForeignKey" }, "IDX_FK__CHATINVITEREQUEST_REQUESTERUSER_TO_USER");

                    b.HasIndex(new[] { "TargetUserForeignKey" }, "IDX_FK__CHATINVITEREQUEST_TARGETUSER_TO_USER");

                    b.ToTable("chat_invite_request", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Users.FriendshipRequest", b =>
                {
                    b.Property<Guid>("RequestUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("requester_id");

                    b.Property<Guid>("TargetUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("target_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 229, DateTimeKind.Local).AddTicks(3412))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("TargetUserRequestMessage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_message");

                    b.HasKey("RequestUserForeignKey", "TargetUserForeignKey");

                    b.HasIndex(new[] { "RequestUserForeignKey" }, "IDX_FK__FRIENDSHIPREQUEST_REQUESTERUSER_TO_USER");

                    b.HasIndex(new[] { "TargetUserForeignKey" }, "IDX_FK__FRIENDSHIPREQUEST_TARGETUSER_TO_USER");

                    b.ToTable("friendship_request", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 233, DateTimeKind.Local).AddTicks(8837))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("password");

                    b.Property<Guid>("UserTypeForeignKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValue(new Guid("c92db314-765b-46dd-bf40-ef7d5a5abd7b"))
                        .HasColumnName("user_type_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.HasIndex("UserTypeForeignKey");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2558),
                            Email = "root@localhost",
                            Name = "Root",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("70a04476-de66-417e-81f3-ca6bae017c5c"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2685),
                            Email = "test0@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2687),
                            Name = "Test0",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("fcd718b3-ad83-4f6e-aa68-08735c371431"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2719),
                            Email = "test1@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2721),
                            Name = "Test1",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("a1f891b5-c542-4e0c-8733-1b324e80c480"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2726),
                            Email = "test2@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2728),
                            Name = "Test2",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("b9787dd7-4761-442d-979d-e28c9c3a3b5e"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2732),
                            Email = "test3@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2734),
                            Name = "Test3",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("7c4cee5d-24d9-4b6c-98d2-4fa80b05e51b"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2737),
                            Email = "test4@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2739),
                            Name = "Test4",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("c3d96c41-956a-4efe-b490-7179fb8441a6"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2745),
                            Email = "test5@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2747),
                            Name = "Test5",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("7a02a64d-4330-4365-a947-e55a34a87e69"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2765),
                            Email = "test6@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2767),
                            Name = "Test6",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("a2d4f1ef-7844-420a-983a-d27b54711123"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2771),
                            Email = "test7@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2773),
                            Name = "Test7",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("42f5f19c-1e17-4eab-a66d-a074d1aab851"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2777),
                            Email = "test8@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2779),
                            Name = "Test8",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        },
                        new
                        {
                            Id = new Guid("8de1b501-7a22-44e4-bba6-2a77c23aa010"),
                            CreatedByUserForeignKey = new Guid("c92db313-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2784),
                            Email = "test9@localhost",
                            LastModifiedTime = new DateTime(2023, 12, 30, 16, 0, 51, 251, DateTimeKind.Local).AddTicks(2785),
                            Name = "Test9",
                            Password = "abcd1234",
                            UserTypeForeignKey = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f")
                        });
                });

            modelBuilder.Entity("Shared.Entities.Users.UserHasRelationToFriend", b =>
                {
                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserFriendForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("friend_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 224, DateTimeKind.Local).AddTicks(6066))
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.HasKey("UserForeignKey", "UserFriendForeignKey");

                    b.HasIndex(new[] { "UserForeignKey" }, "IDX_FK__USERHASRELATIONTOFRIEND_USERFK_TO_USER");

                    b.HasIndex(new[] { "UserFriendForeignKey" }, "IDX_FK__USERHASRELATIONTOFRIEND_USERFRIENDFK_TO_USER");

                    b.ToTable("user_has_relation_to_friend", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Users.UserHasRelationToRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 262, DateTimeKind.Local).AddTicks(1303))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("RoleForeignKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValue(new Guid("c92db414-765b-46dd-bf40-ef7d5a5abd7b"))
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.HasIndex("UsersId");

                    b.HasIndex(new[] { "RoleForeignKey" }, "IDX_FK__USERHASRELATIONTOROLE_ROLEFK_TO_ROLE");

                    b.HasIndex(new[] { "UserForeignKey" }, "IDX_FK__USERHASRELATIONTOROLE_USERFK_TO_USER");

                    b.ToTable("user_has_relation_to_role", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Users.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("CreatedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by_uuid");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 12, 30, 16, 0, 51, 214, DateTimeKind.Local).AddTicks(9333))
                        .HasColumnName("created_time");

                    b.Property<Guid?>("DeletedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("deleted_by_uuid");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_time");

                    b.Property<Guid?>("LastModifiedByUserForeignKey")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by_uuid");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedByUserForeignKey");

                    b.HasIndex("DeletedByUserForeignKey");

                    b.HasIndex("LastModifiedByUserForeignKey");

                    b.ToTable("user_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c92db314-765b-46dd-bf40-ef7d5a5abd7b"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 224, DateTimeKind.Local).AddTicks(1951),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("c3f257ff-1c85-4e3c-b6b2-21ef4afba71f"),
                            CreatedTime = new DateTime(2023, 12, 30, 16, 0, 51, 224, DateTimeKind.Local).AddTicks(1998),
                            Name = "Root"
                        });
                });

            modelBuilder.Entity("Shared.Entities.Auths.Auth", b =>
                {
                    b.HasOne("Shared.Entities.Users.User", "User")
                        .WithMany("Auths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__AUTH_USERID_TO_USER");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Chats.Chat", b =>
                {
                    b.HasOne("Shared.Entities.Users.User", "CreatedByUser")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__CHAT_CREATEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "DeletedByUser")
                        .WithMany("DeletedChats")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__CHAT_DELETEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "LastModifiedByUser")
                        .WithMany("ModifiedChats")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__CHAT_LASTMODIFIEDBYUSERFK_TO_USER");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("Shared.Entities.Chats.ChatRelationToUser", b =>
                {
                    b.HasOne("Shared.Entities.Chats.Chat", "Chat")
                        .WithMany("ChatRelationToUsers")
                        .HasForeignKey("ChatForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CHATRELATIONTOUSER_CHATFK_TO_CHAT");

                    b.HasOne("Shared.Entities.Users.User", "CreatedByUser")
                        .WithMany("CreatedChatRelationToUsers")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__CHATRELATIONTOUSER_CREATEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "DeletedByUser")
                        .WithMany("DeletedChatRelationToUsers")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__CHATRELATIONTOUSER_DELETEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "LastModifiedByUser")
                        .WithMany("ModifiedChatRelationToUsers")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__CHATRELATIONTOUSER_LASTMODIFIEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "User")
                        .WithMany("ChatRelationToUsers")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CHATRELATIONTOUSER_USERFK_TO_USER");

                    b.Navigation("Chat");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Chats.Message", b =>
                {
                    b.HasOne("Shared.Entities.Chats.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__MESSAGE_CHATFK_TO_CHAT");

                    b.HasOne("Shared.Entities.Users.User", "CreatedByUser")
                        .WithMany("CreatedMessages")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__MESSAGE_CREATEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "DeletedByUser")
                        .WithMany("DeletedMessages")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__MESSAGE_DELETEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "LastModifiedByUser")
                        .WithMany("ModifiedMessages")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__MESSAGE_LASTMODIFIEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__MESSAGE_USERFK_TO_USER");

                    b.Navigation("Chat");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Chats.MessageOutbox", b =>
                {
                    b.HasOne("Shared.Entities.Chats.Message", "Message")
                        .WithMany("MessagesInOutbox")
                        .HasForeignKey("MessageForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__MESSAGEOUTBOX_MESSAGEFK_TO_CHAT");

                    b.HasOne("Shared.Entities.Users.User", "User")
                        .WithMany("MessagesInOutbox")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__MESSAGEOUTBOX_USERFK_TO_USER");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Mail.MailOutboxAttachment", b =>
                {
                    b.HasOne("Shared.Entities.Mail.MailOutbox", "Mail")
                        .WithMany("Attachments")
                        .HasForeignKey("MailOutboxForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__MAILOUTBOXATTACHMENT_MAILOUTBOXFK_TO_MAILOUTBOX");

                    b.Navigation("Mail");
                });

            modelBuilder.Entity("Shared.Entities.Mail.MailOutboxRecipient", b =>
                {
                    b.HasOne("Shared.Entities.Mail.EmailSendingType", "SendingType")
                        .WithMany("MailOutboxRecipients")
                        .HasForeignKey("EmailSendingTypeForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__MAILOUTBOXRECIPIENT_EMAILSENDINGTYPEFK_TO_EMAILSENDINGTYPE");

                    b.HasOne("Shared.Entities.Mail.MailOutbox", "Mail")
                        .WithMany("Recipients")
                        .HasForeignKey("MailOutboxForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__MAILOUTBOXRECIPIENT_MAILOUTBOXFK_TO_MAILOUTBOX");

                    b.Navigation("Mail");

                    b.Navigation("SendingType");
                });

            modelBuilder.Entity("Shared.Entities.Roles.Role", b =>
                {
                    b.HasOne("Shared.Entities.Users.User", "CreatedByUser")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__ROLE_CREATEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "DeletedByUser")
                        .WithMany("DeletedRoles")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__ROLE_DELETEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "LastModifiedByUser")
                        .WithMany("ModifiedRoles")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__ROLE_LASTMODIFIEDBYUSERFK_TO_USER");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("Shared.Entities.Users.ChatInviteRequest", b =>
                {
                    b.HasOne("Shared.Entities.Chats.Chat", "Chat")
                        .WithMany("ChatInvitesToUsers")
                        .HasForeignKey("ChatForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CHATINVITEREQUEST_CHATFK_TO_CHAT");

                    b.HasOne("Shared.Entities.Users.User", "RequesterUser")
                        .WithMany("ChatInvitesWhereIamRequester")
                        .HasForeignKey("RequesterUserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CHATINVITEREQUEST_REQUESTERUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "TargetUser")
                        .WithMany("ChatInvitesWhereIamTarget")
                        .HasForeignKey("TargetUserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CHATINVITEREQUEST_TARGETUSERFK_TO_USER");

                    b.Navigation("Chat");

                    b.Navigation("RequesterUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Shared.Entities.Users.FriendshipRequest", b =>
                {
                    b.HasOne("Shared.Entities.Users.User", "RequesterUser")
                        .WithMany("FriendshipRequestsWhereIamRequester")
                        .HasForeignKey("RequestUserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__FRIENDSHIPREQUEST_REQUESTUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "TargetUser")
                        .WithMany("FriendshipRequestsWhereIamTarget")
                        .HasForeignKey("TargetUserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__FRIENDSHIPREQUEST_TARGETUSERFK_TO_USER");

                    b.Navigation("RequesterUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Shared.Entities.Users.User", b =>
                {
                    b.HasOne("Shared.Entities.Users.User", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USER_CREATEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "DeletedByUser")
                        .WithMany("DeletedUsers")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USER_DELETEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "LastModifiedByUser")
                        .WithMany("ModifiedUsers")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USER_LASTMODIFIEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__USER_USERTYPEFK_TO_USERTYPE");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Shared.Entities.Users.UserHasRelationToFriend", b =>
                {
                    b.HasOne("Shared.Entities.Users.User", "User")
                        .WithMany("UserHasRelationToFriendsLeft")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__USERHASRELATIONTOFRIEND_USERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "UserFriend")
                        .WithMany("UserHasRelationToFriendsRight")
                        .HasForeignKey("UserFriendForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__USERHASRELATIONTOFRIEND_USERFRIENDFK_TO_USER");

                    b.Navigation("User");

                    b.Navigation("UserFriend");
                });

            modelBuilder.Entity("Shared.Entities.Users.UserHasRelationToRole", b =>
                {
                    b.HasOne("Shared.Entities.Users.User", "CreatedByUser")
                        .WithMany("CreatedUserHasRelationToRoles")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USERHASRELATIONTOROLE_CREATEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "DeletedByUser")
                        .WithMany("DeletedUserHasRelationToRoles")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USERHASRELATIONTOROLE_DELETEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "LastModifiedByUser")
                        .WithMany("ModifiedUserHasRelationToRoles")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USERHASRELATIONTOROLE_LASTMODIFIEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Roles.Role", "Role")
                        .WithMany("UserHasRelationToRoles")
                        .HasForeignKey("RoleForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__USERHASRELATIONTOROLE_ROLEFK_TO_ROLE");

                    b.HasOne("Shared.Entities.Users.User", "User")
                        .WithMany("UserHasRelationToRoles")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__USERHASRELATIONTOROLE_USERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Entities.Users.UserType", b =>
                {
                    b.HasOne("Shared.Entities.Users.User", "CreatedByUser")
                        .WithMany("CreatedUserTypes")
                        .HasForeignKey("CreatedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USERTYPE_CREATEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "DeletedByUser")
                        .WithMany("DeletedUserTypes")
                        .HasForeignKey("DeletedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USERTYPE_DELETEDBYUSERFK_TO_USER");

                    b.HasOne("Shared.Entities.Users.User", "LastModifiedByUser")
                        .WithMany("ModifiedUserTypes")
                        .HasForeignKey("LastModifiedByUserForeignKey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK__USERTYPE_LASTMODIFIEDBYUSERFK_TO_USER");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("Shared.Entities.Chats.Chat", b =>
                {
                    b.Navigation("ChatInvitesToUsers");

                    b.Navigation("ChatRelationToUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Shared.Entities.Chats.Message", b =>
                {
                    b.Navigation("MessagesInOutbox");
                });

            modelBuilder.Entity("Shared.Entities.Mail.EmailSendingType", b =>
                {
                    b.Navigation("MailOutboxRecipients");
                });

            modelBuilder.Entity("Shared.Entities.Mail.MailOutbox", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("Shared.Entities.Roles.Role", b =>
                {
                    b.Navigation("UserHasRelationToRoles");
                });

            modelBuilder.Entity("Shared.Entities.Users.User", b =>
                {
                    b.Navigation("Auths");

                    b.Navigation("ChatInvitesWhereIamRequester");

                    b.Navigation("ChatInvitesWhereIamTarget");

                    b.Navigation("ChatRelationToUsers");

                    b.Navigation("CreatedChatRelationToUsers");

                    b.Navigation("CreatedChats");

                    b.Navigation("CreatedMessages");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedUserHasRelationToRoles");

                    b.Navigation("CreatedUserTypes");

                    b.Navigation("CreatedUsers");

                    b.Navigation("DeletedChatRelationToUsers");

                    b.Navigation("DeletedChats");

                    b.Navigation("DeletedMessages");

                    b.Navigation("DeletedRoles");

                    b.Navigation("DeletedUserHasRelationToRoles");

                    b.Navigation("DeletedUserTypes");

                    b.Navigation("DeletedUsers");

                    b.Navigation("FriendshipRequestsWhereIamRequester");

                    b.Navigation("FriendshipRequestsWhereIamTarget");

                    b.Navigation("Messages");

                    b.Navigation("MessagesInOutbox");

                    b.Navigation("ModifiedChatRelationToUsers");

                    b.Navigation("ModifiedChats");

                    b.Navigation("ModifiedMessages");

                    b.Navigation("ModifiedRoles");

                    b.Navigation("ModifiedUserHasRelationToRoles");

                    b.Navigation("ModifiedUserTypes");

                    b.Navigation("ModifiedUsers");

                    b.Navigation("UserHasRelationToFriendsLeft");

                    b.Navigation("UserHasRelationToFriendsRight");

                    b.Navigation("UserHasRelationToRoles");
                });

            modelBuilder.Entity("Shared.Entities.Users.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
